import os
from dotenv import load_dotenv
import pandas as pd
import sqlite3
import google.generativeai as genai

# -------------------- Setup Phase --------------------

# Load data
cabecalho_path = os.path.join('data', '202401_NFs_Cabecalho.csv')
itens_path = os.path.join('data', '202401_NFs_Itens.csv')

df_cabecalho = pd.read_csv(cabecalho_path, sep=',',
                           decimal='.', encoding='utf-8')
df_itens = pd.read_csv(itens_path, sep=',', decimal='.', encoding='utf-8')

# Normalize column names
df_cabecalho.columns = df_cabecalho.columns.str.strip(
).str.upper().str.replace(" ", "_")
df_itens.columns = df_itens.columns.str.strip().str.upper().str.replace(" ", "_")

# Standardize key name
df_cabecalho.rename(
    columns={df_cabecalho.columns[0]: "CHAVE_ACESSO"}, inplace=True)
df_itens.rename(columns={df_itens.columns[0]: "CHAVE_ACESSO"}, inplace=True)

# Merge and write to SQLite
merged_df = pd.merge(df_cabecalho, df_itens, on="CHAVE_ACESSO", how="inner")
conn = sqlite3.connect("notas_fiscais.db")
merged_df.to_sql("notas_fiscais", conn, if_exists="replace", index=False)
conn.commit()

# Load Gemini API key
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-flash")

# -------------------- Helper Functions --------------------


def get_schema_description() -> str:
    conn = sqlite3.connect("notas_fiscais.db")
    cursor = conn.execute("PRAGMA table_info(notas_fiscais);")
    return "\n".join([f"{row[1]} ({row[2]})" for row in cursor.fetchall()])


def generate_sql_query(user_question: str, schema: str) -> str:
    prompt = f"""
Voc√™ √© um assistente de dados. Gere uma consulta SQL v√°lida (SQLite) para responder √† pergunta a seguir.

Tabela: notas_fiscais  
Esquema:
{schema}

Pergunta:
{user_question}

Responda somente com a SQL. N√£o use markdown, n√£o explique.
"""
    response = model.generate_content(prompt)
    sql = response.text.strip()

    # Cleanup possible markdown
    if "```sql" in sql:
        sql = sql.split("```sql")[1].split("```")[0].strip()
    elif "```" in sql:
        sql = sql.split("```")[1].strip()

    return sql.rstrip(";")


def run_sql_query(sql: str) -> pd.DataFrame:
    try:
        conn = sqlite3.connect("notas_fiscais.db")
        return pd.read_sql_query(sql, conn)
    except Exception as e:
        raise RuntimeError(f"Erro ao executar SQL: {e}")


def summarize_results(df: pd.DataFrame, user_question: str) -> str:
    if df.empty:
        return "Nenhum resultado encontrado."

    prompt = f"""
Voc√™ √© um agente especialista em Notas Fiscais Eletr√¥nicas (NF-e) com amplo conhecimento t√©cnico, fiscal e normativo. Seu objetivo √© analisar e validar dados fiscais contidos em dois datasets fornecidos: o dataset "Cabecalhos", que cont√©m informa√ß√µes principais de cada nota fiscal, incluindo a Chave de Acesso (chave prim√°ria e identificador √∫nico da nota), N√∫mero da Nota, Data de Emiss√£o, Valor Total da Nota e demais campos fiscais; e o dataset "Itens", que cont√©m os itens individuais de cada nota fiscal, com informa√ß√µes de Chave de Acesso (chave prim√°ria, correspondendo √† chave no dataset Cabecalhos), C√≥digo do Item, Descri√ß√£o do Produto, Quantidade, Valor Unit√°rio, Valor Total do Item e demais campos de detalhe.

Sua principal tarefa √© realizar a valida√ß√£o de consist√™ncia entre os dois datasets: para cada Chave de Acesso, voc√™ deve verificar se a soma do campo Valor Total do Item de todos os itens associados corresponde exatamente ao Valor Total da Nota no dataset Cabecalhos. Sempre que encontrar diverg√™ncias, apresente um relat√≥rio informando a Chave de Acesso, o Valor Total informado na Nota, a soma calculada dos itens e a diferen√ßa apurada.

Al√©m disso, voc√™ deve ser capaz de responder perguntas anal√≠ticas e descritivas sobre os dados dos datasets, como: quantidade total de notas fiscais, soma total de valores de notas, n√∫mero de itens em determinada nota, identifica√ß√£o das maiores notas fiscais emitidas e listagem dos produtos mais comuns. Sempre que poss√≠vel, apresente as respostas em forma de tabela, lista ou resumo num√©rico, conforme for mais adequado.

Voc√™ tamb√©m deve identificar anomalias fiscais, como notas fiscais com valor total zerado, notas fiscais sem itens associados, e itens com valores unit√°rios nulos ou negativos. Suas respostas devem ser t√©cnicas, claras, objetivas e fundamentadas. Sempre explique o racioc√≠nio seguido ao apresentar suas conclus√µes. Utilize a Chave de Acesso como chave prim√°ria para todas as opera√ß√µes de cruzamento de dados. Em caso de aus√™ncia de dados ou limita√ß√µes nos arquivos fornecidos, informe a limita√ß√£o de forma transparente e prossiga com a an√°lise poss√≠vel.

### Cabe√ßalhos das Notas Fiscais:
**CHAVE DE ACESSO, MODELO, S√âRIE, N√öMERO, NATUREZA DA OPERA√á√ÉO, DATA EMISS√ÉO, EVENTO MAIS RECENTE, DATA/HORA EVENTO MAIS RECENTE, CPF/CNPJ Emitente, RAZ√ÉO SOCIAL EMITENTE, INSCRI√á√ÉO ESTADUAL EMITENTE, UF EMITENTE, MUNIC√çPIO EMITENTE, CNPJ DESTINAT√ÅRIO, NOME DESTINAT√ÅRIO, UF DESTINAT√ÅRIO, INDICADOR IE DESTINAT√ÅRIO, DESTINO DA OPERA√á√ÉO, CONSUMIDOR FINAL, PRESEN√áA DO COMPRADOR, VALOR NOTA FISCAL**

### Itens das Notas Fiscais:
**CHAVE DE ACESSO,MODELO,S√âRIE,N√öMERO,NATUREZA DA OPERA√á√ÉO,DATA EMISS√ÉO,CPF/CNPJ Emitente,RAZ√ÉO SOCIAL EMITENTE,INSCRI√á√ÉO ESTADUAL EMITENTE,UF EMITENTE,MUNIC√çPIO EMITENTE,CNPJ DESTINAT√ÅRIO,NOME DESTINAT√ÅRIO,UF DESTINAT√ÅRIO,INDICADOR IE DESTINAT√ÅRIO,DESTINO DA OPERA√á√ÉO,CONSUMIDOR FINAL,PRESEN√áA DO COMPRADOR,N√öMERO PRODUTO,DESCRI√á√ÉO DO PRODUTO/SERVI√áO,C√ìDIGO NCM/SH,NCM/SH (TIPO DE PRODUTO),CFOP,QUANTIDADE,UNIDADE,VALOR UNIT√ÅRIO,VALOR TOTAL**

Ambos os dataframes possuem a coluna **CHAVE DE ACESSO** que √© uma chave √∫nica de 44 d√≠gitos que identifica cada nota fiscal. Fa√ßa o join entre eles usando essa chave para unir as informa√ß√µes de cabe√ßalho e itens.

Com base nessas informa√ß√µes, responda √†s perguntas do usu√°rio.

Pergunta:
{user_question}

Resultados:
{df.to_string(index=False)}

Responda em portugu√™s, com linguagem clara, t√©cnica e objetiva. N√£o explique o racioc√≠nio, apenas forne√ßa a resposta direta.
"""
    response = model.generate_content(prompt)
    return response.text.strip()

# -------------------- Chat Loop --------------------


def run_chat_agent():
    schema = get_schema_description()
    print("ü§ñ Assistente de Notas Fiscais iniciado. Fa√ßa sua pergunta ou digite 'sair' para encerrar.")

    while True:
        user_question = input("\nüó®Ô∏è Voc√™: ")
        if user_question.lower() in ["sair", "exit", "quit"]:
            print("üëã Encerrando. At√© logo!")
            break

        try:
            sql = generate_sql_query(user_question, schema)
            print(f"\nüß† SQL gerada: {sql}\n")
            df = run_sql_query(sql)
            answer = summarize_results(df, user_question)
            print(f"\nü§ñ Resposta: {answer}\n")
        except Exception as e:
            print(f"\n‚ö†Ô∏è Erro: {e}\n")


# üîπ Entry Point
if __name__ == "__main__":
    run_chat_agent()
